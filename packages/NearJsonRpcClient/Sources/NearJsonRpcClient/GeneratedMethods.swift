// Generated by NEAR Protocol Swift Client Generator
// Do not edit manually - Generated from OpenAPI specification
// Generated on: 2025-09-29 02:29:48 +0000

import Foundation
import NearJsonRpcTypes

// MARK: - Generated Client Methods

extension NearRpcClient {
    /// Returns the proofs for a transaction execution.
    public func lightClientProof(params: [String: Any]) async throws -> RpcLightClientExecutionProofResponse {
        return try await makeRequest(method: .light_client_proof, params: params)
    }

    /// Requests the status of the connected RPC node. This includes information about sync status, nearcore node version, protocol version, the current set of validators, etc.
    public func status() async throws -> RpcStatusResponse {
        return try await makeRequest(method: .status)
    }

    /// [Deprecated] Get initial state and parameters for the genesis block. Consider genesis_config instead.
    public func experimentalGenesisConfig(params: [String: Any]) async throws -> GenesisConfig {
        return try await makeRequest(method: .EXPERIMENTAL_genesis_config, params: params)
    }

    /// Queries the current state of node network connections. This includes information about active peers, transmitted data, known producers, etc.
    public func networkInfo() async throws -> RpcNetworkInfoResponse {
        return try await makeRequest(method: .network_info)
    }

    /// Fetches a receipt by its ID (as is, without a status or execution outcome)
    public func experimentalReceipt(params: [String: Any]) async throws -> RpcReceiptResponse {
        return try await makeRequest(method: .EXPERIMENTAL_receipt, params: params)
    }

    /// This module allows you to make generic requests to the network.
    /// 
    /// The `RpcQueryRequest` struct takes in a [`BlockReference`](https://docs.rs/near-primitives/0.12.0/near_primitives/types/enum.BlockReference.html) and a [`QueryRequest`](https://docs.rs/near-primitives/0.12.0/near_primitives/views/enum.QueryRequest.html).
    /// 
    /// The `BlockReference` enum allows you to specify a block by `Finality`, `BlockId` or `SyncCheckpoint`.
    /// 
    /// The `QueryRequest` enum provides multiple variants for performing the following actions:
    ///  - View an account's details
    ///  - View a contract's code
    ///  - View the state of an account
    ///  - View the `AccessKey` of an account
    ///  - View the `AccessKeyList` of an account
    ///  - Call a function in a contract deployed on the network.
    public func query(params: [String: Any]) async throws -> [String: Any] {
        let response: DictionaryResponse = try await makeRequest(method: .query, params: params)
        return response.value
    }

    /// Returns changes in block for given block height or hash over all transactions for all the types. Includes changes like account_touched, access_key_touched, data_touched, contract_code_touched.
    public func blockEffects(params: [String: Any]) async throws -> RpcStateChangesInBlockByTypeResponse {
        return try await makeRequest(method: .block_effects, params: params)
    }

    /// Returns the current health status of the RPC node the client connects to.
    public func health(params: [String: Any]) async throws -> [String: Any] {
        let response: DictionaryResponse = try await makeRequest(method: .health, params: params)
        return response.value
    }

    /// Sends transaction. Returns the guaranteed execution status and the results the blockchain can provide at the moment.
    public func sendTx(params: [String: Any]) async throws -> RpcTransactionResponse {
        return try await makeRequest(method: .send_tx, params: params)
    }

    /// Returns details of a specific chunk. You can run a block details query to get a valid chunk hash.
    public func chunk(params: [String: Any]) async throws -> RpcChunkResponse {
        return try await makeRequest(method: .chunk, params: params)
    }

    /// Returns the next light client block.
    public func nextLightClientBlock(params: [String: Any]) async throws -> RpcLightClientNextBlockResponse {
        return try await makeRequest(method: .next_light_client_block, params: params)
    }

    /// Returns changes for a given account, contract or contract code for given block height or hash.
    public func changes(params: [String: Any]) async throws -> RpcStateChangesInBlockResponse {
        return try await makeRequest(method: .changes, params: params)
    }

    /// [Deprecated] Returns changes for a given account, contract or contract code for given block height or hash. Consider using changes instead.
    public func experimentalChanges(params: [String: Any]) async throws -> RpcStateChangesInBlockResponse {
        return try await makeRequest(method: .EXPERIMENTAL_changes, params: params)
    }

    /// Returns the proofs for a transaction execution.
    public func experimentalLightClientBlockProof(params: [String: Any]) async throws -> RpcLightClientBlockProofResponse {
        return try await makeRequest(method: .EXPERIMENTAL_light_client_block_proof, params: params)
    }

    /// Queries active validators on the network. Returns details and the state of validation on the blockchain.
    public func validators(params: [String: Any]) async throws -> RpcValidatorResponse {
        return try await makeRequest(method: .validators, params: params)
    }

    /// [Deprecated] Returns the future windows for maintenance in current epoch for the specified account. In the maintenance windows, the node will not be block producer or chunk producer. Consider using maintenance_windows instead.
    public func experimentalMaintenanceWindows(params: [String: Any]) async throws -> [String: Any] {
        let response: DictionaryResponse = try await makeRequest(method: .EXPERIMENTAL_maintenance_windows, params: params)
        return response.value
    }

    /// [Deprecated] Sends a transaction and immediately returns transaction hash. Consider using send_tx instead.
    public func broadcastTxAsync(params: [String: Any]) async throws -> CryptoHash {
        return try await makeRequest(method: .broadcast_tx_async, params: params)
    }

    /// Returns the proofs for a transaction execution.
    public func experimentalLightClientProof(params: [String: Any]) async throws -> RpcLightClientExecutionProofResponse {
        return try await makeRequest(method: .EXPERIMENTAL_light_client_proof, params: params)
    }

    /// Returns gas price for a specific block_height or block_hash. Using [null] will return the most recent block's gas price.
    public func gasPrice(params: [String: Any]) async throws -> RpcGasPriceResponse {
        return try await makeRequest(method: .gas_price, params: params)
    }

    /// Returns the current epoch validators ordered in the block producer order with repetition. This endpoint is solely used for bridge currently and is not intended for other external use cases.
    public func experimentalValidatorsOrdered(params: [String: Any]) async throws -> [String: Any] {
        let response: DictionaryResponse = try await makeRequest(method: .EXPERIMENTAL_validators_ordered, params: params)
        return response.value
    }

    /// Get initial state and parameters for the genesis block
    public func genesisConfig(params: [String: Any]) async throws -> GenesisConfig {
        return try await makeRequest(method: .genesis_config, params: params)
    }

    /// [Deprecated] Sends a transaction and waits until transaction is fully complete. (Has a 10 second timeout). Consider using send_tx instead.
    public func broadcastTxCommit(params: [String: Any]) async throws -> RpcTransactionResponse {
        return try await makeRequest(method: .broadcast_tx_commit, params: params)
    }

    /// Queries client node configuration
    public func clientConfig(params: [String: Any]) async throws -> RpcClientConfigResponse {
        return try await makeRequest(method: .client_config, params: params)
    }

    /// Queries status of a transaction by hash and returns the final transaction result.
    public func tx(params: [String: Any]) async throws -> RpcTransactionResponse {
        return try await makeRequest(method: .tx, params: params)
    }

    /// Queries status of a transaction by hash, returning the final transaction result and details of all receipts.
    public func experimentalTxStatus(params: [String: Any]) async throws -> RpcTransactionResponse {
        return try await makeRequest(method: .EXPERIMENTAL_tx_status, params: params)
    }

    /// Contains the split storage information. More info on split storage [here](https://near-nodes.io/archival/split-storage-archival)
    public func experimentalSplitStorageInfo(params: [String: Any]) async throws -> RpcSplitStorageInfoResponse {
        return try await makeRequest(method: .EXPERIMENTAL_split_storage_info, params: params)
    }

    /// Returns the future windows for maintenance in current epoch for the specified account. In the maintenance windows, the node will not be block producer or chunk producer.
    public func maintenanceWindows(params: [String: Any]) async throws -> [String: Any] {
        let response: DictionaryResponse = try await makeRequest(method: .maintenance_windows, params: params)
        return response.value
    }

    /// [Deprecated] Returns changes in block for given block height or hash over all transactions for all the types. Includes changes like account_touched, access_key_touched, data_touched, contract_code_touched. Consider using block_effects instead
    public func experimentalChangesInBlock(params: [String: Any]) async throws -> RpcStateChangesInBlockByTypeResponse {
        return try await makeRequest(method: .EXPERIMENTAL_changes_in_block, params: params)
    }

    /// Queries the congestion level of a shard. More info about congestion [here](https://near.github.io/nearcore/architecture/how/receipt-congestion.html?highlight=congestion#receipt-congestion)
    public func experimentalCongestionLevel(params: [String: Any]) async throws -> RpcCongestionLevelResponse {
        return try await makeRequest(method: .EXPERIMENTAL_congestion_level, params: params)
    }

    /// Returns block details for given height or hash
    public func block(params: [String: Any]) async throws -> RpcBlockResponse {
        return try await makeRequest(method: .block, params: params)
    }

    /// A configuration that defines the protocol-level parameters such as gas/storage costs, limits, feature flags, other settings
    public func experimentalProtocolConfig(params: [String: Any]) async throws -> RpcProtocolConfigResponse {
        return try await makeRequest(method: .EXPERIMENTAL_protocol_config, params: params)
    }

}
