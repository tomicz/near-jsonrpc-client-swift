// Generated by NEAR Protocol Swift Type Generator
// Do not edit manually - Generated from OpenAPI specification
// Generated on: 2025-09-26 02:18:31 +0000

import Foundation

/// Available RPC methods for NEAR Protocol
public enum RpcMethod: String, CaseIterable {
case EXPERIMENTAL_CHANGES = "EXPERIMENTAL_changes"
case EXPERIMENTAL_CHANGES_IN_BLOCK = "EXPERIMENTAL_changes_in_block"
case EXPERIMENTAL_CONGESTION_LEVEL = "EXPERIMENTAL_congestion_level"
case EXPERIMENTAL_GENESIS_CONFIG = "EXPERIMENTAL_genesis_config"
case EXPERIMENTAL_LIGHT_CLIENT_BLOCK_PROOF = "EXPERIMENTAL_light_client_block_proof"
case EXPERIMENTAL_LIGHT_CLIENT_PROOF = "EXPERIMENTAL_light_client_proof"
case EXPERIMENTAL_MAINTENANCE_WINDOWS = "EXPERIMENTAL_maintenance_windows"
case EXPERIMENTAL_PROTOCOL_CONFIG = "EXPERIMENTAL_protocol_config"
case EXPERIMENTAL_RECEIPT = "EXPERIMENTAL_receipt"
case EXPERIMENTAL_SPLIT_STORAGE_INFO = "EXPERIMENTAL_split_storage_info"
case EXPERIMENTAL_TX_STATUS = "EXPERIMENTAL_tx_status"
case EXPERIMENTAL_VALIDATORS_ORDERED = "EXPERIMENTAL_validators_ordered"
case BLOCK = "block"
case BLOCK_EFFECTS = "block_effects"
case BROADCAST_TX_ASYNC = "broadcast_tx_async"
case BROADCAST_TX_COMMIT = "broadcast_tx_commit"
case CHANGES = "changes"
case CHUNK = "chunk"
case CLIENT_CONFIG = "client_config"
case GAS_PRICE = "gas_price"
case GENESIS_CONFIG = "genesis_config"
case HEALTH = "health"
case LIGHT_CLIENT_PROOF = "light_client_proof"
case MAINTENANCE_WINDOWS = "maintenance_windows"
case NETWORK_INFO = "network_info"
case NEXT_LIGHT_CLIENT_BLOCK = "next_light_client_block"
case QUERY = "query"
case SEND_TX = "send_tx"
case STATUS = "status"
case TX = "tx"
case VALIDATORS = "validators"
    /// All available RPC method names
    public static let allMethods = RpcMethod.allCases.map { $0.rawValue }
}

/// Path to method mapping from OpenAPI specification
public let PATH_TO_METHOD_MAP: [String: String] = [
    "/EXPERIMENTAL_changes": "EXPERIMENTAL_changes",
    "/EXPERIMENTAL_changes_in_block": "EXPERIMENTAL_changes_in_block",
    "/EXPERIMENTAL_congestion_level": "EXPERIMENTAL_congestion_level",
    "/EXPERIMENTAL_genesis_config": "EXPERIMENTAL_genesis_config",
    "/EXPERIMENTAL_light_client_block_proof": "EXPERIMENTAL_light_client_block_proof",
    "/EXPERIMENTAL_light_client_proof": "EXPERIMENTAL_light_client_proof",
    "/EXPERIMENTAL_maintenance_windows": "EXPERIMENTAL_maintenance_windows",
    "/EXPERIMENTAL_protocol_config": "EXPERIMENTAL_protocol_config",
    "/EXPERIMENTAL_receipt": "EXPERIMENTAL_receipt",
    "/EXPERIMENTAL_split_storage_info": "EXPERIMENTAL_split_storage_info",
    "/EXPERIMENTAL_tx_status": "EXPERIMENTAL_tx_status",
    "/EXPERIMENTAL_validators_ordered": "EXPERIMENTAL_validators_ordered",
    "/block": "block",
    "/block_effects": "block_effects",
    "/broadcast_tx_async": "broadcast_tx_async",
    "/broadcast_tx_commit": "broadcast_tx_commit",
    "/changes": "changes",
    "/chunk": "chunk",
    "/client_config": "client_config",
    "/gas_price": "gas_price",
    "/genesis_config": "genesis_config",
    "/health": "health",
    "/light_client_proof": "light_client_proof",
    "/maintenance_windows": "maintenance_windows",
    "/network_info": "network_info",
    "/next_light_client_block": "next_light_client_block",
    "/query": "query",
    "/send_tx": "send_tx",
    "/status": "status",
    "/tx": "tx",
    "/validators": "validators"
]
